realization IterativeCases
  implements Multiply for IntegerFacility

  uses IsPositive for IntegerFacility
  uses Add for IntegerFacility
  uses Subtract for IntegerFacility

  procedure Multiply (updates i: Integer,
                      restores j: Integer)
    variable p, nj, z: Integer
    if IsGreater(j, z) then
      if IsGreater(i, z) then
        loop
          maintains p + i * j = #p + #i * #j and nj + j = #nj + #j and
                    i = #i and
                    z = #z and
                    j >= 0
          decreases j
        while IsPositive(j) do
          Add(p, i)
          Increment(nj)
          Decrement(j)
        end loop
      else
        loop
          maintains p + i * j = #p + #i * #j and nj + j = #nj + #j and
                    i = #i and
                    z = #z and
                    j >= 0
          decreases j
        while IsPositive(j) do
          Add(p, i)
          Increment(nj)
          Decrement(j)
        end loop
      end if
    else
      if IsGreater(i, z) then
        loop
          maintains p + i * j = #p + #i * #j and nj + j = #nj + #j and
                    i = #i and
                    z = #z and
                    j <= 0 and
                    nj <= 0
          decreases -j
        while not AreEqual(j, z) do
          Subtract(p, i)
          Decrement(nj)
          Increment(j)
        end loop
      else
        loop
          maintains p + i * j = #p + #i * #j and nj + j = #nj + #j and
                    i = #i and
                    z = #z and
                    j <= 0
          decreases -j
        while not AreEqual(j, z) do
          Subtract(p, i)
          Decrement(nj)
          Increment(j)
        end loop
      end if
    end if
    i :=: p
    j :=: nj
  end Multiply

end IterativeCases
