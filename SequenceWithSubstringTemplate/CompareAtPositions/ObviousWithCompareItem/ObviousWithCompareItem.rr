realization ObviousWithCompareItem (function AreInOrder (restores x: Item,
                                                         restores y: Item) : control
                                      ensures
                                        AreInOrder = ARE_IN_ORDER(x, y))
  implements CompareAtPositions for SequenceWithSubstringTemplate

  uses IsNegative for UnboundedIntegerFacility
  //    uses CompareItemWith for SequenceWithSubstringTemplate

  local function CompareItemWith (restores s: Sequence,
                                  restores a: Item,
                                  restores y: Integer)
    : control
    ensures CompareItemWith=(0 <= y and y < |s| and
                             there exists b: Item
                               (<b> = substring(s, y, y + 1) and
                               ARE_IN_ORDER(a, b)))
    variable len: Integer
    len := Length(s)
    if IsGreater(len, y) and not IsNegative(y) then
      variable b: Item
      Swap(s, y, b)
      CompareItemWith := AreInOrder(a, b)
      Swap(s, y, b)
    end if
  end CompareItemWith

  function CompareAtPositions (restores s: Sequence,
                               restores x: Integer,
                               restores y: Integer) : control
    variable len: Integer
    len := Length(s)
    if IsGreater(len, x) and not IsNegative(x) and not AreEqual(x, y) then
      variable a: Item
      Swap(s, x, a)
      CompareAtPositions := CompareItemWith(s, a, y)
      Swap(s, x, a)
    end if
  end CompareAtPositions

end ObviousWithCompareItem
